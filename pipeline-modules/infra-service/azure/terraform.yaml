provisioner: azure
name: terraform
version: 1
revision: 1
displayName: Terraform pipeline
description: Executes Terraform commands on code from external repository
target: ""
keywords:
  - terraform
author: CloudCover
meta: {}
inputs:
  properties:
    pipeline_secret_env:
      title: Global Secret Environment
      description: Mapping of globally available secret variable id.
      type: object
      default: {}
    pipeline_env:
      title: Global Environment
      description: Mapping of globally available variables to values.
      type: object
      default: {}
    artifact_bucket:
      title: Artifact Bucket
      description: Name of the bucket to store Terraform artifacts.
      type: string
      format: regex
    artifact_dir:
      title: Artifact Directory
      description: Name of the root directory in the artifact bucket.
      type: string
    iac_checkout_src:
      title: IaC Source Repository URL
      description: Path to Git repository with IaC code.
      type: string
    iac_checkout_target:
      title: IaC Source Revision Identifier
      description: Git branch, tag or commit hash to checkout.
      type: string
    storage_account_name:
      title: Storage Account Name
      description: Storage Account to Store Build Artifacts.
      type: string
    iac_root:
      title: IaC Root Directory
      description: Relative path to the infrastructure code.
      type: string
      default: .
    tf_action:
      title: Terraform Action
      description: Terraform action to be performed (e.g plan, apply, destroy).
      type: string
      enum:
        - plan
        - apply
        - destroy
    tf_plan_file:
      title: Terraform Plan File
      description: Name of the plan file artifact.
      type: string
      default: terraform.tfplan
    tf_state_file:
      title: Terraform State File
      description: Name of the state file artifact.
      type: string
      default: terraform.tfstate
    tf_version:
      title: Terraform Version
      description: Version of Terraform to be used to deploy the infrastructure.
      type: string
      default: 0.13.6
    tf_log_level:
      title: Terraform Log Level
      description: Terraform log verbosity.
      type: string
      enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - JSON
      default: DEBUG
  required:
    - iac_checkout_src
    - iac_checkout_target
    - artifact_bucket
    - artifact_dir
    - tf_action
    - pipeline_env
    - storage_account_name
  internal:
    - iac_checkout_src
    - iac_checkout_target
    - iac_root
    - artifact_bucket
    - artifact_dir
    - tf_action
    - tf_state_file
    - tf_plan_file
    - pipeline_secret_env
    - pipeline_env
    - storage_account_name
template: |
  {% set artifact_root_path = artifact_dir|add:"/$(Build.BuildId)" %}     {# <artifact_dir>/$(Build.BuildId) #}
  {% set local_checkout_path = '$(System.DefaultWorkingDirectory)/code' %}
  {% set local_code_path = local_checkout_path|add:"/"|add:iac_root %}
  {% set local_artifact_path = '$(System.DefaultWorkingDirectory)/artifacts' %}
  {% set tf_plan_json_file = tf_plan_file|add:".json" %}                      {# <tf_plan_file>.json #}
  {% set tf_var_name_prefix = 'VG_TF_VAR_' %}
  {% set tf_var_file_path = '/tmp/vg_tf_var_values.tfvars' %}
  {% set tf_var_name_dash_placeholder = '___' %}

  {# redirects shell command output to a log file #}
  {%- macro logger(name, stdout=true) -%}
  {{ local_artifact_path }}/{{ get_log_name(name) }}{% if stdout %} 2>&1{% endif %}
  {%- endmacro -%}

  {# generates a standard log name from action and name suffix #}
  {% macro get_log_name(suffix) %}{{ tf_action }}_terraform_{{ suffix }}.log{% endmacro %}

  {# uploads a log file generated by the logger, does not fail on error #}
  {% macro upload_log(name) -%}
  {{ upload_artifact(get_log_name(name), true) }}
  {%- endmacro %}

  {# uploads a file artifact, by default fail on error #}
  {% macro upload_artifact(file, ignore_err=false) -%}
  az storage blob upload   --name "{{ artifact_root_path }}/{{ file }}" --file "{{ local_artifact_path }}/{{ file }}" --account-name {{storage_account_name}} --auth-mode login --container-name {{artifact_bucket}}
  {%- endmacro %}

  {% macro download_artifact(file, ignore_err=false) -%}
  az storage blob download --name "{{ artifact_dir }}/{{ file }}" --file "{{ local_artifact_path }}/{{ file }}" --account-name {{storage_account_name}} --auth-mode login --container-name {{artifact_bucket}}
  {%- endmacro %}

  steps:
  - script: |
      set -x
      {% for env_key, env_value in pipeline_env -%}
      export {{ env_key }}="{{ env_value }}"
      {% endfor -%}
      {% for env_key, env_value in pipeline_secret_env -%}
      export {{ env_key }}="$({{ env_key }})"
      {% endfor -%}
      cd "/tmp"
      wget "https://releases.hashicorp.com/terraform/{{ tf_version }}/terraform_{{ tf_version }}_linux_amd64.zip"
      unzip terraform_{{ tf_version }}_linux_amd64.zip -d /usr/bin
      mkdir -p "{{ local_artifact_path }}"
      git clone --no-checkout "https://{{ iac_checkout_src }}" "{{ local_checkout_path }}"
      cd "{{ local_checkout_path }}"
      git checkout "{{ iac_checkout_target }}"
      printenv | grep "{{ tf_var_name_prefix }}*" | sed 's/^{{ tf_var_name_prefix }}//' | awk -F '=' -v OFS='=' '{ gsub("{{ tf_var_name_dash_placeholder }}", "-", $1); st = index($0,"="); val=substr($0,st+1); print $1, val ~ /^{.*?}$/ || val ~ /^\[.*?\]$/ ? val:"\""val"\"" }' > {{ tf_var_file_path }}
      cd "{{ local_code_path }}"
      terraform init
      az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) -t $(ARM_TENANT_ID)
      az account set --subscription $(ARM_SUBSCRIPTION_ID)
      {% if tf_action == 'plan' %}
      # terraform plan
      terraform plan -var-file={{ tf_var_file_path }} -out={{ local_artifact_path }}/{{ tf_plan_file }} -state={{ local_artifact_path }}/{{ tf_state_file }} > {{ logger('plan') }}
      # terraform show
      terraform show -json {{ local_artifact_path }}/{{ tf_plan_file }} 1> {{ local_artifact_path }}/{{ tf_plan_json_file }} 2>> {{ logger('plan', false) }}
      {{ upload_log('plan') }}
      {{ upload_artifact(tf_plan_file) }}
      {{ upload_artifact(tf_plan_json_file) }}
      {% elif tf_action == 'apply' %}
      {{ download_artifact(tf_plan_file) }}
      terraform apply -auto-approve -backup=- -state={{ local_artifact_path }}/{{ tf_state_file }} {{ local_artifact_path }}/{{ tf_plan_file }} > {{ logger('apply') }}
      {{ upload_log('apply') }}
      {{ upload_artifact(tf_state_file) }}
      {% endif %}
      az logout
